fc_lm <- forecast(fit_lm, new_data = valid_transactions_tsibble)
fc_lm$.mean <- fc_lm$.mean + add_weekly_season + add_yearly_season
train_transactions_tsibble |> autoplot(transactions) + autolayer(fc_lm)
train_transactions_tsibble |> autoplot(transactions) + autolayer(fc_lm * 10)
train_transactions_tsibble
train_transactions_tsibble |> autoplot(transactions) + autolayer(fc_lm) + autoplot(lm_trend)
train_transactions_tsibble |> autoplot(transactions, lm_trend) + autolayer(fc_lm)
train_transactions_tsibble
train_transactions_tsibble |> autoplot(lm_trend) + autolayer(fc_lm)
fit_lm <- train_transactions_tsibble |> model(lm = TSLM(lm_trend ~ TAVG +
PRCP + TMIN + isSunday + isHoliday _trend() + season()))
fit_lm <- train_transactions_tsibble |> model(lm = TSLM(lm_trend ~ TAVG +
PRCP + TMIN + isSunday + isHoliday + trend() + season()))
#forecast using validation data
fc_lm <- forecast(fit_lm, new_data = valid_transactions_tsibble)
fc_lm$.mean <- fc_lm$.mean + add_weekly_season + add_yearly_season
train_transactions_tsibble |> autoplot(lm_trend) + autolayer(fc_lm)
sum(fc_lm$.mean + weekly_season_add) / sum(valid_transactions_tsibble$transactions)
sum(fc_lm$.mean) / sum(valid_transactions_tsibble$transactions)
fit <- train_transactions_tsibble |> model(ARIMA(lm_trend ~ pdq(1,0,0)))
#### Section 1.2b : AR(1) Model
plot(train_transactions_tsibble$lm_trend)
fit <- train_transactions_tsibble |> model(ARIMA(lm_trend ~ pdq(1,0,0)))
fit <- train_transactions_tsibble |> model(ARIMA(lm_trend))
report(fit)
fc <- fit |> forecast(h=90)
fc |> autoplot(train_transactions_tsibble, level=10)
sum(fc$.mean) / sum(valid_transactions_tsibble$transactions)
#fit the model
fit_lm <- train_nonspecial_df |> model(lm = TSLM(transactions ~ TAVG +
PRCP + TMIN + isSunday + isHoliday + trend() + season()))
######## remove holidays and Sundays
nonspecial_df <- subset(transactions_tsibble, (isSunday == 0) & (isHoliday == 0))
special_df <- subset(transactions_tsibble, (isSunday == 1) | (isHoliday == 1))
nonspecial_df$X <- 1:length(nonspecial_df$X)
nonspecial_df <- as_tsibble(nonspecial_df, index=date)
train_nonspecial_df <- nonspecial_df |> slice(0:(length(nonspecial_df$transactions)-90))
valid_nonspecial_df <- nonspecial_df |> slice(n()-89:0)
plot(x=nonspecial_df$date, y=nonspecial_df$transactions)
nonspecial_df %>% model(STL(transactions ~ trend(window=90) +
season(period=6))) %>% components() |>  autoplot()
#fit the model
fit_lm <- train_nonspecial_df |> model(lm = TSLM(transactions ~ TAVG +
PRCP + TMIN + isSunday + isHoliday + trend() + season()))
#forecast using validation data
fc_lm <- forecast(fit_lm, new_data = valid_nonspecial_df)
transactions_tsibble |> autoplot(transactions) + autolayer(fc)
train_transactions_tsibble |> autoplot(transactions) + autolayer(fc)
sum(fc_lm$.mean) / sum(valid_transactions_tsibble$transactions)
fit_lm <- nonspecial_df |> model(lm = TSLM(transactions ~ TAVG + PRCP + TMIN + TMAX +
trend() + season()))
fc_lm <- forecast(fit_lm, new_data = valid_nonspecial_df)
nonspecial_df |> autoplot(transactions, ) + autolayer(fc_lm, level=0) +
labs(title='Number of transactions 2021 - 2023', x='Date')
train_nonspecial_df |> autoplot(transactions, ) + autolayer(fc_lm, level=0) +
labs(title='Number of transactions 2021 - 2023', x='Date')
sum(fc_lm$.mean) / sum(valid_nonspecial_df$transactions)
train_nonspecial_df |> autoplot(transactions, ) + autolayer(fc_lm, level=10) +
labs(title='Number of transactions 2021 - 2023', x='Date')
fit <- train_nonspecial_df |> model(ARIMA(transactions ~ pdq(1,0,0)))
train_nonspecial_df |> autoplot(transactions, ) + autolayer(fc_lm) +
labs(title='Number of transactions 2021 - 2023', x='Date')
setwd("/Users/stephenreagin/Desktop/USD/USD_GitHub/ADS_506_applied_time_series_analysis/final_project/")
library(forecast)
#install.packages('GGally')
library(fpp3)
library(tidyverse)
library(dplyr)
transactions_df <- read.csv("daily_total_amount.csv")
transactions_df$date <- as.Date(transactions_df$date)
transactions_tsibble <- as_tsibble(transactions_df, index=date)
#training and validation data splits
train_transactions_tsibble <- transactions_tsibble |>
slice(0:(length(transactions_df$transactions)-90))
valid_transactions_tsibble <- transactions_tsibble |> slice(n()-89:0)
######## remove holidays and Sundays
nonspecial_df <- subset(transactions_tsibble, (isSunday == 0) & (isHoliday == 0))
special_df <- subset(transactions_tsibble, (isSunday == 1) | (isHoliday == 1))
nonspecial_df$X <- 1:length(nonspecial_df$X)
nonspecial_df <- as_tsibble(nonspecial_df, index=date)
train_nonspecial_df <- nonspecial_df |> slice(0:(length(nonspecial_df$transactions)-90))
valid_nonspecial_df <- nonspecial_df |> slice(n()-89:0)
plot(x=nonspecial_df$date, y=nonspecial_df$transactions)
transactions_df <- read.csv("daily_total_amount.csv")
transactions_df$date <- as.Date(transactions_df$date)
transactions_tsibble <- as_tsibble(transactions_df, index=date)
#training and validation data splits
train_transactions_tsibble <- transactions_tsibble |>
slice(0:(length(transactions_df$sum_total)-90))
valid_transactions_tsibble <- transactions_tsibble |> slice(n()-89:0)
######## remove holidays and Sundays
nonspecial_df <- subset(transactions_tsibble, (isSunday == 0) & (isHoliday == 0))
special_df <- subset(transactions_tsibble, (isSunday == 1) | (isHoliday == 1))
nonspecial_df$X <- 1:length(nonspecial_df$X)
nonspecial_df <- as_tsibble(nonspecial_df, index=date)
train_nonspecial_df <- nonspecial_df |> slice(0:(length(nonspecial_df$transactions)-90))
train_nonspecial_df <- nonspecial_df |> slice(0:(length(nonspecial_df$sum_total)-90))
valid_nonspecial_df <- nonspecial_df |> slice(n()-89:0)
plot(x=nonspecial_df$date, y=nonspecial_df$sum_total)
nonspecial_df %>% model(STL(sum_total ~ trend(window=90) +
season(period=6))) %>% components() |>  autoplot()
transactions_tsibble %>% model(STL(sum_total ~ trend(window=90) +
season(period=6))) %>% components() |>  autoplot()
setwd("/Users/stephenreagin/Desktop/USD/USD_GitHub/ADS_506_applied_time_series_analysis/final_project/")
library(forecast)
#install.packages('GGally')
library(fpp3)
library(tidyverse)
library(dplyr)
transactions_df <- read.csv("daily_total_amount.csv")
transactions_df$date <- as.Date(transactions_df$date)
transactions_tsibble <- as_tsibble(transactions_df, index=date)
#training and validation data splits
train_transactions_tsibble <- transactions_tsibble |>
slice(0:(length(transactions_df$transactions)-90))
valid_transactions_tsibble <- transactions_tsibble |> slice(n()-89:0)
######## remove holidays and Sundays
nonspecial_df <- subset(transactions_tsibble, (isSunday == 0) & (isHoliday == 0))
special_df <- subset(transactions_tsibble, (isSunday == 1) | (isHoliday == 1))
nonspecial_df$X <- 1:length(nonspecial_df$X)
nonspecial_df <- as_tsibble(nonspecial_df, index=X)
train_nonspecial_df <- nonspecial_df |> slice(0:(length(nonspecial_df$transactions)-90))
valid_nonspecial_df <- nonspecial_df |> slice(n()-89:0)
plot(x=nonspecial_df$date, y=nonspecial_df$transactions)
nonspecial_df %>% model(STL(transactions ~ trend(window=90) +
season(period=6))) %>% components() |>  autoplot()
#fit the model
fit_lm <- train_transactions_tsibble |> model(lm = TSLM(transactions ~ TAVG +
PRCP + TMIN + isSunday + isHoliday + trend() + season()))
#forecast using validation data
fc_lm <- forecast(fit_lm, new_data = valid_transactions_tsibble)
transactions_tsibble |> autoplot(transactions) + autolayer(fc)
train_transactions_tsibble |> autoplot(transactions) + autolayer(fc)
sum(fc_lm$.mean) / sum(valid_transactions_tsibble$transactions)
#training and validation data splits
train_transactions_tsibble <- transactions_tsibble |>
slice(0:(length(transactions_df$transactions)-90))
valid_transactions_tsibble <- transactions_tsibble |> slice(n()-89:0)
train_transactions_tsibble
plot(x=transactions_tsibble$date, y=nonspecial_df$transactions)
plot(x=transactions_tsibble$date, y=transactions_tsibble$transactions)
transactions_tsibble %>% model(STL(transactions ~ trend(window=90) +
season(period=6))) %>% components() |>  autoplot()
#training and validation data splits
train_transactions_tsibble <- transactions_tsibble |>
slice(0:(length(transactions_df$transactions)-90))
valid_transactions_tsibble <- transactions_tsibble |> slice(n()-89:0)
######## remove holidays and Sundays
nonspecial_df <- subset(transactions_tsibble, (isSunday == 0) & (isHoliday == 0))
special_df <- subset(transactions_tsibble, (isSunday == 1) | (isHoliday == 1))
nonspecial_df$X <- 1:length(nonspecial_df$X)
nonspecial_df <- as_tsibble(nonspecial_df, index=X)
train_nonspecial_df <- nonspecial_df |> slice(0:(length(nonspecial_df$transactions)-90))
valid_nonspecial_df <- nonspecial_df |> slice(n()-89:0)
nonspecial_df %>% model(STL(transactions ~ trend(window=90) +
season(period=6))) %>% components() |>  autoplot()
#fit the model
fit_lm <- train_transactions_tsibble |> model(lm = TSLM(transactions ~ TAVG +
PRCP + TMIN + isSunday + isHoliday + trend() + season()))
#forecast using validation data
fc_lm <- forecast(fit_lm, new_data = valid_transactions_tsibble)
transactions_tsibble |> autoplot(transactions) + autolayer(fc)
transactions_tsibble |> autoplot(transactions) + autolayer(fc_lm)
train_transactions_tsibble |> autoplot(transactions) + autolayer(fc_lm)
train_transactions_tsibble |> autoplot(transactions) + autolayer(fc_lm)
sum(fc_lm$.mean) / sum(valid_transactions_tsibble$transactions)
fit <- train_transactions_tsibble |> model(ARIMA(transactions ~ pdq(1,0,0)))
report(fit)
fc <- fit |> forecast(h=90)
fc |> autoplot(train_transactions_tsibble, level=10)
sum(fc$.mean) / sum(valid_transactions_tsibble$transactions)
stl <- train_transactions_tsibble |> model(STL(transactions ~ trend(window=30) +
season(window='periodic'), robust=TRUE))
stl_cmp <- stl |>  components()
stl_cmp |> autoplot()
stl <- train_transactions_tsibble |> model(STL(transactions ~ trend(window=600) +
season(window='periodic'), robust=TRUE))
stl <- train_transactions_tsibble |> model(STL(transactions ~ trend(window=60) +
season(window='periodic'), robust=TRUE))
stl_cmp <- stl |>  components()
stl_cmp |> autoplot()
stl <- train_transactions_tsibble |> model(STL(transactions ~ trend(window=140) +
season(window='periodic'), robust=TRUE))
stl_cmp <- stl |>  components()
stl_cmp |> autoplot()
stl <- train_transactions_tsibble |> model(STL(transactions ~ trend(window=14) +
season(window='periodic'), robust=TRUE))
stl_cmp <- stl |>  components()
stl_cmp |> autoplot()
stl <- train_transactions_tsibble |> model(STL(transactions ~ trend(window=30) +
season(window='periodic'), robust=TRUE))
stl_cmp <- stl |>  components()
stl_cmp |> autoplot()
stl_cmp
train_transactions_tsibble$lm_trend <- stl_cmp$trend
stl_cmp$season_week[1:7]
#8/29 - 11/26.   576 668
stl_cmp$season_year[576:668][1:90]
add_yearly_season <- stl_cmp$season_year[576:668][1:90]
stl_cmp$season_week[1:7]
weekly_season <- c(334994.1, 388528.4,  441570.3,  551945.2,  413160.9, -2278912.4, 148713.4)
add_weekly_season <- rep(weekly_season, 13)[1:90]
add_yearly_season <- stl_cmp$season_year[576:668][1:90]
fit_lm <- train_transactions_tsibble |> model(lm = TSLM(lm_trend ~ TAVG +
PRCP + TMIN + isSunday + isHoliday + trend() + season()))
#forecast using validation data
fc_lm <- forecast(fit_lm, new_data = valid_transactions_tsibble)
fc_lm$.mean <- fc_lm$.mean + add_weekly_season + add_yearly_season
train_transactions_tsibble |> autoplot(lm_trend) + autolayer(fc_lm)
#forecast using validation data
fc_lm <- forecast(fit_lm, new_data = valid_transactions_tsibble)
train_transactions_tsibble |> autoplot(lm_trend) + autolayer(fc_lm)
fit_lm <- train_transactions_tsibble |> model(lm = TSLM(lm_trend ~ TAVG +
PRCP + TMIN + isSunday + isHoliday + trend() + season()))
#forecast using validation data
fc_lm <- forecast(fit_lm, new_data = valid_transactions_tsibble)
train_transactions_tsibble |> autoplot(lm_trend) + autolayer(fc_lm)
sum(fc_lm$.mean) / sum(valid_transactions_tsibble$transactions)
fit_lm <- train_transactions_tsibble |> model(lm = TSLM(lm_trend ~ TAVG +
PRCP + TMIN + isSunday + isHoliday + season()))
#forecast using validation data
fc_lm <- forecast(fit_lm, new_data = valid_transactions_tsibble)
train_transactions_tsibble |> autoplot(lm_trend) + autolayer(fc_lm)
fit_lm <- train_transactions_tsibble |> model(lm = TSLM(lm_trend ~ TAVG +
PRCP + TMIN + isSunday + isHoliday + trend() + season()))
#forecast using validation data
fc_lm <- forecast(fit_lm, new_data = valid_transactions_tsibble)
train_transactions_tsibble |> autoplot(lm_trend) + autolayer(fc_lm)
sum(fc_lm$.mean) / sum(valid_transactions_tsibble$transactions)
fit <- train_transactions_tsibble |> model(ARIMA(lm_trend))
report(fit)
fc <- fit |> forecast(h=90)
fc |> autoplot(train_transactions_tsibble, level=10)
sum(fc$.mean) / sum(valid_transactions_tsibble$transactions)
fit_lm <- nonspecial_df |> model(lm = TSLM(transactions ~ TAVG + PRCP + TMIN + TMAX +
trend() + season()))
fc_lm <- forecast(fit_lm, new_data = valid_nonspecial_df)
train_nonspecial_df |> autoplot(transactions, ) + autolayer(fc_lm) +
labs(title='Number of transactions 2021 - 2023', x='Date')
######## remove holidays and Sundays
nonspecial_df <- subset(transactions_tsibble, (isSunday == 0) & (isHoliday == 0))
special_df <- subset(transactions_tsibble, (isSunday == 1) | (isHoliday == 1))
nonspecial_df$X <- 1:length(nonspecial_df$X)
nonspecial_df <- as_tsibble(nonspecial_df, index=date)
train_nonspecial_df <- nonspecial_df |> slice(0:(length(nonspecial_df$transactions)-90))
valid_nonspecial_df <- nonspecial_df |> slice(n()-89:0)
plot(x=nonspecial_df$date, y=nonspecial_df$transactions)
nonspecial_df %>% model(STL(transactions ~ trend(window=90) +
season(period=6))) %>% components() |>  autoplot()
fit_lm <- nonspecial_df |> model(lm = TSLM(transactions ~ TAVG + PRCP + TMIN + TMAX +
trend() + season()))
fc_lm <- forecast(fit_lm, new_data = valid_nonspecial_df)
train_nonspecial_df |> autoplot(transactions, ) + autolayer(fc_lm) +
labs(title='Number of transactions 2021 - 2023', x='Date')
sum(fc_lm$.mean) / sum(valid_nonspecial_df$transactions)
#weekly transactions with holidays
plot.xts(weekly_transactions.xts, main='Weekly Transactions over Time',ylim=c(0,150000))
lines(weekly_precip.xts * 1000 + 20000, col='blue', lty=2, lwd=1)
points(isHoliday.xts * 100000-1, pch = 20, col='purple')
addLegend("topleft",c('Weekly transactions', "Rainfall",'Holiday'), lty=c(1,2,3),
col=c('black','blue','purple'), lwd=c(1,1,2))
#weekly transactions with holidays
plot.xts(weekly_transactions.xts, main='Weekly Transactions over Time',ylim=c(0,150000))
lines(weekly_precip.xts * 1000 + 10000, col='blue', lty=2, lwd=1)
points(isHoliday.xts * 100000-1, pch = 20, col='purple')
#weekly transactions with holidays
plot.xts(weekly_transactions.xts, main='Weekly Transactions over Time',ylim=c(0,150000))
lines(weekly_precip.xts * 1000 + 20000, col='blue', lty=2, lwd=1)
points(isHoliday.xts * 100000-1, pch = 20, col='purple')
addLegend("topleft",c('Weekly transactions', "Rainfall",'Holiday'), lty=c(1,2,3),
col=c('black','blue','purple'), lwd=c(1,1,2))
#7.2
fit_mr <- nonspecial_df |> model(tslm = TSLM(transactions ~ TAVG + TMIN + PRCP))
report(fit_mr)
augment(fit_mr) |> ggplot(aes(x=X)) + geom_line(aes(y=transactions,color="Transactions")) +
geom_line(aes(y=.fitted, color='Fitted'))
augment(fit_mr) |> ggplot(aes(x=transactions, y=.fitted)) + geom_point() +
geom_abline(intercept=0, slope=1)
#7.3
fit_mr |> gg_tsresiduals()
augment(fit_mr) |> features(.resid, ljung_box, lag=6)
nonspecial_df |> left_join(residuals(fit_mr), by='X') |>
pivot_longer(PRCP:transactions, names_to = 'regressor', values_to='x') |>
ggplot(aes(x=x, y=.resid)) + geom_point() + facet_wrap(. ~ regressor, scales='free_x')
######## remove holidays and Sundays
nonspecial_df <- subset(transactions_tsibble, (isSunday == 0) & (isHoliday == 0))
special_df <- subset(transactions_tsibble, (isSunday == 1) | (isHoliday == 1))
nonspecial_df$X <- 1:length(nonspecial_df$X)
nonspecial_df <- as_tsibble(nonspecial_df, index=X)
train_nonspecial_df <- nonspecial_df |> slice(0:(length(nonspecial_df$transactions)-90))
valid_nonspecial_df <- nonspecial_df |> slice(n()-89:0)
plot(x=nonspecial_df$date, y=nonspecial_df$transactions)
nonspecial_STL <- nonspecial_df %>%
model(STL(transactions ~ trend(window=25) + season(period=6))) %>%
components() |>
autoplot()
nonspecial_STL
transactions_df <- read.csv("daily_total_transactions.csv")
transactions_df$date <- as.Date(transactions_df$date)
transactions_tsibble <- as_tsibble(transactions_df, index=date)
#training and validation data splits
train_transactions_tsibble <- transactions_tsibble |>
slice(0:(length(transactions_df$transactions)-90))
valid_transactions_tsibble <- transactions_tsibble |> slice(n()-89:0)
plot(x=transactions_tsibble$date, y=transactions_tsibble$transactions)
transactions_tsibble %>% model(STL(transactions ~ trend(window=90) +
season(period=6))) %>% components() |>  autoplot()
transactions_tsibble %>% model(STL(transactions ~ trend(window=30) +
season(period=6))) %>% components() |>  autoplot()
transactions_tsibble %>% model(STL(transactions ~ trend(window=30) +
season(period=7))) %>% components() |>  autoplot()
transactions_tsibble %>% model(STL(transactions ~ trend(window=90) +
season(period=7))) %>% components() |>  autoplot()
transactions_tsibble %>% model(STL(transactions ~ trend(window=60) +
season(period=7))) %>% components() |>  autoplot()
transactions_tsibble %>% model(STL(transactions ~ trend(window=7) +
season(period=7))) %>% components() |>  autoplot()
transactions_tsibble %>% model(STL(transactions ~ trend(window=28) +
season(period=7))) %>% components() |>  autoplot()
transactions_tsibble %>% model(STL(transactions ~ trend(window=180) +
season(period=7))) %>% components() |>  autoplot()
transactions_tsibble %>% model(STL(transactions ~ trend(window=90) +
season(period=7))) %>% components() |>  autoplot()
transactions_tsibble %>% model(STL(transactions ~ trend(window=90) +
season(period=7))) %>% components() |>  autoplot()
transactions_tsibble %>% model(STL(transactions ~ trend(window=60) +
season(period=7))) %>% components() |>  autoplot()
#7.1
transactions_tsibble |> ggplot(aes(x=TAVG, y=transactions)) + geom_point() +
geom_smooth(method = 'lm', se=FALSE)
transactions_tsibble |> ggplot(aes(x=PRCP, y=transactions)) + geom_point() +
geom_smooth(method = 'lm', se=FALSE)
transactions_tsibble |> model(TSLM(transactions ~ TAVG)) |> report()
transactions_tsibble |> ggplot(aes(x=PRCP, y=transactions)) + geom_point() +
geom_smooth(method = 'lm', se=FALSE)
#7.1
transactions_tsibble |> ggplot(aes(x=TAVG, y=transactions)) + geom_point() +
geom_smooth(method = 'lm', se=FALSE)
#7.1
transactions_tsibble |> ggplot(aes(x=TAVG, y=transactions)) + geom_point() +
geom_smooth(method = 'lm', se=FALSE) + labs(title="Transactions as a function of Temperature (C)")
#7.1
transactions_tsibble |> ggplot(aes(x=TAVG, y=transactions)) + geom_point() +
geom_smooth(method = 'lm', se=FALSE) + labs(title="Daily Transactions as a function of Temperature (C)")
#7.1
nonspecial_df |> ggplot(aes(x=TAVG, y=transactions)) + geom_point() +
geom_smooth(method = 'lm', se=FALSE)
#7.1
nonspecial_df |> ggplot(aes(x=TAVG, y=transactions)) + geom_point() +
geom_smooth(method = 'lm', se=FALSE) + labs(title = "Daily Transactions as a Function of Temperature (Sundays & Holidays removed)")
#7.6
train_nonspecial_df <- nonspecial_df |> slice(0:(length(nonspecial_df$transactions)-90))
valid_nonspecial_df <- nonspecial_df |> slice(n()-89:0)
fit <- train_nonspecial_df |> model(TSLM(transactions ~ trend() + season()))
fit_lm <- nonspecial_df |> model(lm = TSLM(transactions ~ TAVG + PRCP + TMIN + TMAX +
trend() + season()))
setwd("/Users/stephenreagin/Desktop/USD/USD_GitHub/ADS_506_applied_time_series_analysis/final_project/")
library(forecast)
#install.packages('GGally')
library(fpp3)
library(tidyverse)
library(dplyr)
transactions_df <- read.csv("daily_total_transactions.csv")
transactions_df$date <- as.Date(transactions_df$date)
transactions_tsibble <- as_tsibble(transactions_df, index=date)
#training and validation data splits
train_transactions_tsibble <- transactions_tsibble |>
slice(0:(length(transactions_df$transactions)-90))
valid_transactions_tsibble <- transactions_tsibble |> slice(n()-89:0)
plot(x=transactions_tsibble$date, y=transactions_tsibble$transactions)
transactions_tsibble %>% model(STL(transactions ~ trend(window=60) +
season(period=7))) %>% components() |>  autoplot()
######## remove holidays and Sundays
nonspecial_df <- subset(transactions_tsibble, (isSunday == 0) & (isHoliday == 0))
special_df <- subset(transactions_tsibble, (isSunday == 1) | (isHoliday == 1))
nonspecial_df$X <- 1:length(nonspecial_df$X)
nonspecial_df <- as_tsibble(nonspecial_df, index=date)
train_nonspecial_df <- nonspecial_df |> slice(0:(length(nonspecial_df$transactions)-90))
valid_nonspecial_df <- nonspecial_df |> slice(n()-89:0)
plot(x=nonspecial_df$date, y=nonspecial_df$transactions)
nonspecial_df %>% model(STL(transactions ~ trend(window=90) +
season(period=6))) %>% components() |>  autoplot()
#fit the model
fit_lm <- train_transactions_tsibble |> model(lm = TSLM(transactions ~ TAVG +
PRCP + TMIN + isSunday + isHoliday + trend() + season()))
#forecast using validation data
fc_lm <- forecast(fit_lm, new_data = valid_transactions_tsibble)
transactions_tsibble |> autoplot(transactions) + autolayer(fc_lm)
train_transactions_tsibble |> autoplot(transactions) + autolayer(fc_lm)
sum(fc_lm$.mean) / sum(valid_transactions_tsibble$transactions)
fit <- train_transactions_tsibble |> model(ARIMA(transactions ~ pdq(1,0,0)))
report(fit)
fc <- fit |> forecast(h=90)
fc |> autoplot(train_transactions_tsibble, level=10)
sum(fc$.mean) / sum(valid_transactions_tsibble$transactions)
stl <- train_transactions_tsibble |> model(STL(transactions ~ trend(window=30) +
season(window='periodic'), robust=TRUE))
stl_cmp <- stl |>  components()
stl_cmp |> autoplot()
stl_cmp
train_transactions_tsibble$lm_trend <- stl_cmp$trend
plot(x=transactions_tsibble$date, y=transactions_tsibble$transactions)
plot(x=transactions_tsibble$date, y=transactions_tsibble$transactions,
xlab="Date",ylab="Daily Transactions", title='Daily Transactions over Time')
plot(x=transactions_tsibble$date, y=transactions_tsibble$transactions,
xlab="Date",ylab="Daily Transactions", main='Daily Transactions over Time')
fit_lm <- nonspecial_df |> model(lm = TSLM(transactions ~ TAVG + PRCP + TMIN + TMAX +
trend() + season()))
fc_lm <- forecast(fit_lm, new_data = valid_nonspecial_df)
train_nonspecial_df |> autoplot(transactions, ) + autolayer(fc_lm) +
labs(title='Number of transactions 2021 - 2023', x='Date')
train_nonspecial_df |> autoplot(transactions, ) + autolayer(fc_lm,level=10) +
labs(title='Number of transactions 2021 - 2023', x='Date')
train_nonspecial_df |> autoplot(transactions) + autoplot(valid_nonspecial_df$transactions)
train_nonspecial_df |> autoplot(transactions) + autolayer(valid_nonspecial_df$transactions)
train_nonspecial_df |> autoplot(transactions)  + autolayer(fc_lm,level=10) +
labs(title='Number of transactions 2021 - 2023', x='Date')
sum(fc_lm$.mean) / sum(valid_nonspecial_df$transactions)
train_nonspecial_df |> autoplot(transactions)  + autolayer(fc_lm,level=10) +
labs(title='Number of transactions 2021 - 2023', x='Date') +
addLegend("topleft",c('Weekly transactions', "Rainfall",'Holiday'), lty=c(1,2,3),
col=c('black','blue','purple'), lwd=c(1,1,2))
train_nonspecial_df |> autoplot(transactions)  + autolayer(fc_lm,level=10) +
labs(title='Number of transactions 2021 - 2023', x='Date') +
legend("topleft",c('Weekly transactions', "Rainfall",'Holiday'), lty=c(1,2,3),
col=c('black','blue','purple'), lwd=c(1,1,2))
train_nonspecial_df |> autoplot(transactions)  + autolayer(fc_lm,level=10) +
labs(title='Number of transactions 2021 - 2023', x='Date') +
legend("topleft",c('Weekly transactions', "Rainfall",'Holiday'))
train_nonspecial_df |> autoplot(transactions)  + autolayer(fc_lm,level=10) +
labs(title='Number of transactions 2021 - 2023', x='Date')
train_nonspecial_df |> autoplot(transactions)  + autolayer(fc_lm,level=10) +
labs(title='Number of transactions 2021 - 2023', x='Date')
train_nonspecial_df |> autoplot(transactions)  + autolayer(fc_lm,level=10) +
labs(title='Number of transactions 2021 - 2023', x='Date', tag = c("data","non"))
train_nonspecial_df |> autoplot(transactions)  + autolayer(fc_lm,level=10) +
labs(title='Number of transactions 2021 - 2023 with 90-day prediction', x='Date', ylab='Transactions')
train_nonspecial_df |> autoplot(transactions)  + autolayer(fc_lm,level=10) +
labs(title='Transactions volume 2021 - 2023, with 90-day prediction', x='Date', ylab='Transactions')
nonspecial_df |> autoplot(transactions)  + autolayer(fc_lm,level=10) +
labs(title='Transactions volume 2021 - 2023, with 90-day prediction', x='Date', ylab='Transactions')
nonspecial_df |> autoplot(transactions, color='gray')  + autolayer(fc_lm,level=10) +
labs(title='Transactions volume 2021 - 2023, with 90-day prediction', x='Date', ylab='Transactions')
nonspecial_df |> autoplot(transactions, color='darkgray')  + autolayer(fc_lm,level=10) +
labs(title='Transactions volume 2021 - 2023, with 90-day prediction', x='Date', ylab='Transactions')
nonspecial_df |> autoplot(transactions, color='darkgray2')  + autolayer(fc_lm,level=10) +
labs(title='Transactions volume 2021 - 2023, with 90-day prediction', x='Date', ylab='Transactions')
nonspecial_df |> autoplot(transactions, color='darkgray')  + autolayer(fc_lm,level=10) +
labs(title='Transactions volume 2021 - 2023, with 90-day prediction', x='Date', ylab='Transactions')
nonspecial_df |> autoplot(transactions, color='darkgray')  + autolayer(fc_lm) +
labs(title='Transactions volume 2021 - 2023, with 90-day prediction', x='Date', ylab='Transactions')
nonspecial_df |> autoplot(transactions, color='darkgray')  + autolayer(fc_lm, level=0) +
labs(title='Transactions volume 2021 - 2023, with 90-day prediction', x='Date', ylab='Transactions')
nonspecial_df |> autoplot(transactions, color='darkgray')  + autolayer(fc_lm, level=0) +
labs(title='Transactions volume 2021 - 2023, with 90-day prediction', x='Date',
ylab='Transactions')
nonspecial_df |> autoplot(transactions, color='darkgray')  +
autolayer(fc_lm, level=0) +
labs(title='Transactions volume 2021 - 2023, with 90-day prediction (linear regression)',
x='Date', ylab='Transactions')
sum(valid_nonspecial_df$transactions)
sum(fc_lm$.mean)
sum(fc_lm$.mean) / sum(valid_nonspecial_df$transactions)
#9.9
nonspecial_df |> gg_tsdisplay(difference(transactions, 6),
plot_type = 'partial', lag=25)
######## remove holidays and Sundays
nonspecial_df <- subset(transactions_tsibble, (isSunday == 0) & (isHoliday == 0))
special_df <- subset(transactions_tsibble, (isSunday == 1) | (isHoliday == 1))
nonspecial_df$X <- 1:length(nonspecial_df$X)
nonspecial_df <- as_tsibble(nonspecial_df, index=X)
train_nonspecial_df <- nonspecial_df |> slice(0:(length(nonspecial_df$transactions)-90))
valid_nonspecial_df <- nonspecial_df |> slice(n()-89:0)
plot(x=nonspecial_df$date, y=nonspecial_df$transactions)
nonspecial_STL <- nonspecial_df %>%
model(STL(transactions ~ trend(window=25) + season(period=6))) %>%
components() |>
autoplot()
nonspecial_STL
#9.9
nonspecial_df |> gg_tsdisplay(difference(transactions, 6),
plot_type = 'partial', lag=25)
nonspecial_df |> gg_tsdisplay(difference(transactions, 6) |>
difference(), plot_type = 'partial', lag=25)
fit <- train_nonspecial_df |> model(
arima012011 = ARIMA(transactions ~ 0 + pdq(1,2,2) + PDQ(0,1,1)),
arima210011 = ARIMA(transactions ~ 0 + pdq(2,1,0) + PDQ(0,1,1)),
auto = ARIMA(transactions, stepwise = FALSE, approx = FALSE))
fit |> pivot_longer(everything(), names_to = "Model Name", values_to = 'Order')
glance(fit) |> arrange(AICc) |> select(.model:BIC)
fc <- fit |> forecast(h=90)
fc |> autoplot(train_nonspecial_df, level=10)
sum(fc2$.mean) / sum(valid_nonspecial_df$transactions)
fc |> autoplot(train_nonspecial_df, level=10, color='gray')
fc <- fit |> forecast(h=90)
fc |> autoplot(train_nonspecial_df, level=10, color='gray')
sum(fc2$.mean) / sum(valid_nonspecial_df$transactions)
fc |> autoplot(train_nonspecial_df, level=10) +
labs(x="Date")
fc |> autoplot(train_nonspecial_df, level=10) +
labs(x="Date", y ='Transactions')
fc |> autoplot(train_nonspecial_df, level=10) +
labs(x="Date", y ='Transactions', title='AR(1) ARIMA Model')
fc |> autoplot(train_nonspecial_df, level=10) +
labs(x="Date", y ='Transactions', title='ARIMA Model 90-day forecasts')
sum(valid_nonspecial_df$transactions)
sum(fc2$.mean)
sum(fc2$.mean) / sum(valid_nonspecial_df$transactions)
tail(train_nonspecial_df)
head(train_nonspecial_df)
tail(train_nonspecial_df)
tail(valid_nonspecial_df)
